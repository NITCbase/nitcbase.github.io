"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[7739],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>I,contentTitle:()=>b,default:()=>y,frontMatter:()=>N,metadata:()=>g,toc:()=>w});var a=n(7462),r=n(7294),l=n(3905),i=n(6010),o=n(2389),s=n(7392),p=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:o,values:m,groupId:k,className:f}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=m??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(N,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==g&&!N.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:I,setTabGroupChoices:w}=(0,p.U)(),[C,y]=(0,r.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:v}=(0,c.o5)();if(null!=k){const e=I[k];null!=e&&e!==C&&N.some((t=>t.value===e))&&y(e)}const F=e=>{const t=e.currentTarget,n=x.indexOf(t),a=N[n].value;a!==C&&(v(t),y(a),null!=k&&w(k,String(a)))},_=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},f)},N.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>x.push(e),onKeyDown:_,onFocus:F,onClick:F},l,{className:(0,i.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,r.cloneElement)(h.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function k(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}const f="tabItem_Ymn6";function h(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(f,a),hidden:n},t)}const N={sidebar_position:2,title:"Installation Guidelines",tags:["Installation","Guidelines","XFS"]},b="XFS Interface Installation Guidelines",g={unversionedId:"Misc/XFS Interface/Installation Guidelines",id:"Misc/XFS Interface/Installation Guidelines",title:"Installation Guidelines",description:"Setup",source:"@site/docs/Misc/XFS Interface/Installation Guidelines.md",sourceDirName:"Misc/XFS Interface",slug:"/Misc/XFS Interface/Installation Guidelines",permalink:"/docs/Misc/XFS Interface/Installation Guidelines",draft:!1,tags:[{label:"Installation",permalink:"/docs/tags/installation"},{label:"Guidelines",permalink:"/docs/tags/guidelines"},{label:"XFS",permalink:"/docs/tags/xfs"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Installation Guidelines",tags:["Installation","Guidelines","XFS"]},sidebar:"Misc",previous:{title:"XFS Interface",permalink:"/docs/Misc/XFS Interface/introduction"}},I={},w=[{value:"Setup",id:"setup",level:2},{value:"Files and Directories",id:"files-and-directories",level:2},{value:"Frontend Interface Setup",id:"frontend-interface-setup",level:2},{value:"Docker based setup for XFS Interface",id:"docker-based-setup-for-xfs-interface",level:2},{value:"Docker based setup for Frontend Interface",id:"docker-based-setup-for-frontend-interface",level:2}],C={toc:w};function y(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"xfs-interface-installation-guidelines"},"XFS Interface Installation Guidelines"),(0,l.kt)("h2",{id:"setup"},"Setup"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The following setup instructions assume that you have a Linux based machine. If you face any difficulties during the environment setup or you are running Windows or Mac operating system and do not want to set up a linux box, you can try the ",(0,l.kt)("a",{parentName:"p",href:"#docker-based-setup-for-xfs-interface"},"Docker based setup given here"),". Note: Windows installation of docker requires WSL2.")),(0,l.kt)("p",null,"The following are the instructions for installation in linux/unix environments:"),(0,l.kt)(k,{mdxType:"Tabs"},(0,l.kt)(h,{value:"ubuntu",label:"Ubuntu / Debian",default:!0,mdxType:"TabItem"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update;\nsudo apt-get install -y build-essential cmake gcc wget curl\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,l.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Change directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n"))))),(0,l.kt)(h,{value:"fedora",label:"Fedora / Red Hat",mdxType:"TabItem"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install cmake make automake gcc gcc-c++ kernel-devel wget curl\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,l.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Change directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n"))))),(0,l.kt)(h,{value:"arch",label:"Arch Linux",mdxType:"TabItem"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -Syy\nsudo pacman -Sy base-devel cmake gcc wget curl\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,l.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Change directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,l.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n")))))),(0,l.kt)("h2",{id:"files-and-directories"},"Files and Directories"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Notable directories / files include:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Disk/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"disk")," binary file on which NITCbase Disk is simulated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Disk_Class/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"Disk.cpp")," file which encompasses the Disk Class described in the Physical Layer. Students should ",(0,l.kt)("strong",{parentName:"li"},"only")," use the Disk Class Object instantiation for doing disk acceess (read & write and create & destroy)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"define/")," : contains the global constants."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Files/"),": Within this folder, three sub-directories can be found:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Batch_Execution_FIles")," - files taken as input by ",(0,l.kt)("inlineCode",{parentName:"li"},"run")," command is organized and fetched from here (run files)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Input_Files")," - Input data files for commands like ",(0,l.kt)("inlineCode",{parentName:"li"},"import"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"insert from file")," etc. are organized and fetched from here."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Output_Fies")," - Output data files generated from ",(0,l.kt)("inlineCode",{parentName:"li"},"dump")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"export")," are organized and fetched from here."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Frontend_Interface/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"Frontend.cpp")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"frontend-runner.cpp")," files. Refer ",(0,l.kt)("a",{parentName:"li",href:"/docs/Design/Frontend"},"Frontend Interface section")," to know more. Students need not edit the ",(0,l.kt)("inlineCode",{parentName:"li"},"frontend-runner.cpp")," file rather, can start from the methods of Frontend C++ Class in ",(0,l.kt)("inlineCode",{parentName:"li"},"Frontend.cpp")," for lower layer function call invocations. To build Frontend-Interface executable locally in Linux Environment, ",(0,l.kt)("inlineCode",{parentName:"li"},"build.sh")," script present in this folder can be executed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"XFS_Interface/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"build.sh")," script file for building XFS Interface. Once built succesfully, the ",(0,l.kt)("inlineCode",{parentName:"li"},"XFS-Interface")," executable will be present here."),(0,l.kt)("li",{parentName:"ul"},"Dockerfiles (To be noted if you are following the Docker method of installation given ",(0,l.kt)("a",{parentName:"li",href:"#docker-based-setup-for-xfs-interface"},"here"),"):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Dockerfile_frontend")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Dockerfile_xfs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"build_frontend.sh")," - To build the docker image for Frontend Interface from ",(0,l.kt)("inlineCode",{parentName:"li"},"Dockerfile_frontend"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"build_xfs.sh")," - To build the docker image for XFS Interface from ",(0,l.kt)("inlineCode",{parentName:"li"},"Dockerfile_xfs"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"run_frontend.sh")," - To run the docker image of Frontend Interface."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"run_xfs.sh")," - To run the docker image of XFS Interface."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"install.sh"),": contains build scripts for local linux based installation of NITCbase.")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"We can use sub-directories within ",(0,l.kt)("inlineCode",{parentName:"p"},"/Files/Batch_Execution_Files")," to organize the run files. In that case, ",(0,l.kt)("inlineCode",{parentName:"p"},"run folder_name/run_file")," format can be used.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The entire folder structure is as follows:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"NITCbase\n.\n\u251c\u2500\u2500 Disk\n\u2502\xa0\xa0 \u251c\u2500\u2500 README.txt\n\u2502\xa0\xa0 \u2514\u2500\u2500 disk\n\u251c\u2500\u2500 Disk_Class\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 Disk.h\n\u251c\u2500\u2500 Dockerfile_frontend\n\u251c\u2500\u2500 Dockerfile_xfs\n\u251c\u2500\u2500 Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Batch_Execution_Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Input_Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Output_Files\n\u2502   .\n\u2502   .\n\u2502   .\n\u251c\u2500\u2500 Frontend_Interface\n\u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 Frontend.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 Frontend.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 frontend-runner.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 frontend-runner.h\n\u251c\u2500\u2500 XFS_Interface\n\u2502\xa0\xa0 \u251c\u2500\u2500 BPlusTree.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 BPlusTree.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 OpenRelTable.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 OpenRelTable.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 algebra.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 algebra.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 block_access.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 block_access.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 disk_structures.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 external_fs_commands.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 external_fs_commands.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 interface.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 interface.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 schema.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 schema.h\n\u251c\u2500\u2500 build_frontend.sh\n\u251c\u2500\u2500 build_xfs.sh\n\u251c\u2500\u2500 define\n\u2502\xa0\xa0 \u251c\u2500\u2500 constants.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 enum_constants.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 errors.h\n\u2502\xa0\xa0 \u2514\u2500\u2500 id.h\n\u251c\u2500\u2500 install\n\u2502\xa0\xa0 \u251c\u2500\u2500 install.sh\n\u251c\u2500\u2500 run_frontend.sh\n\u2514\u2500\u2500 run_xfs.sh\n")))),(0,l.kt)("h2",{id:"frontend-interface-setup"},"Frontend Interface Setup"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Ensure you have done till step 2 in the ",(0,l.kt)("a",{parentName:"li",href:"#setup"},"above setup"),"."),(0,l.kt)("li",{parentName:"ol"},"Change directory to ",(0,l.kt)("inlineCode",{parentName:"li"},"Frontend_Interface/")," as follows:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd nitcbase/Frontend_Interface\n"))),(0,l.kt)("li",{parentName:"ol"},"Run the following script file to generate the ",(0,l.kt)("inlineCode",{parentName:"li"},"Frontend-Interface")," executable as follows:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,l.kt)("li",{parentName:"ol"},"Run the Frontend Interface as follows:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./Frontend-Interface\n")))),(0,l.kt)("h2",{id:"docker-based-setup-for-xfs-interface"},"Docker based setup for XFS Interface"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Download and Install docker by following the steps mentioned ",(0,l.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"here"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"You can go through the ",(0,l.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-started/"},"Docker quick start quide")," to know more about Docker."))),(0,l.kt)("li",{parentName:"ol"},"Open the Docker application and keep it running in the background.")),(0,l.kt)(k,{mdxType:"Tabs"},(0,l.kt)(h,{value:"mac",label:"Mac",default:!0,mdxType:"TabItem"},(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Download the compressed NITCbase package from ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"either one"))," of the following options and extract the compressed file:"),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/Nitcbase/nitcbase-download/raw/main/NITCbase.zip"},"zip")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/Nitcbase/nitcbase-download/raw/main/NITCbase.tar.gz"},"tar.gz")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Open Terminal Application change working directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase/")," as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Ensure that the ",(0,l.kt)("inlineCode",{parentName:"p"},"build_xfs.sh")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"run_xfs.sh")," have the execute permissions by running the following commands in terminal:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_xfs.sh;\nchmod +x run_xfs.sh;\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following shell script which will build the docker image of XFS Interface:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./build_xfs.sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"To run the Docker Instance of XFS Interface execute the following shell script:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./run_xfs.sh\n"))))),(0,l.kt)(h,{value:"win",label:"Windows (WSL2)",default:!0,mdxType:"TabItem"},(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Open WSL Linux terminal and run the following command to download the NITCbase package:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Change working directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase/")," as follows:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Ensure that the ",(0,l.kt)("inlineCode",{parentName:"p"},"build_xfs.sh")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"run_xfs.sh")," have the execute permissions by running the following commands in terminal:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_xfs.sh;\nchmod +x run_xfs.sh;\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following shell script which will build the docker image of XFS Interface:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./build_xfs.sh\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"To run the Docker Instance of XFS Interface execute the following shell script:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./run_xfs.sh\n")))))),(0,l.kt)("h2",{id:"docker-based-setup-for-frontend-interface"},"Docker based setup for Frontend Interface"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Ensure that you have done till step 4 in the ",(0,l.kt)("a",{parentName:"li",href:"#docker-based-setup-for-xfs-interface"},"above setup")," and that Docker application is running the background."),(0,l.kt)("li",{parentName:"ol"},"Open Terminal and change working directory to ",(0,l.kt)("inlineCode",{parentName:"li"},"NITCbase/")," as follows:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,l.kt)("li",{parentName:"ol"},"Ensure that the ",(0,l.kt)("inlineCode",{parentName:"li"},"build_frontend.sh")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"run_frontend.sh")," have the execute permissions by running the following commands in terminal:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_frontend.sh;\nchmod +x run_frontend.sh;\n"))),(0,l.kt)("li",{parentName:"ol"},"Run the following shell script which will build the docker image of Frontend Interface:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./build_frontend.sh\n"))),(0,l.kt)("li",{parentName:"ol"},"To run the Docker Instance of Frontend Interface execute the following shell script:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./run_frontend.sh\n")))))}y.isMDXComponent=!0}}]);