"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"Design":[{"type":"link","label":"Architecture","href":"/docs/Design/Architecture","docId":"Design/Architecture"},{"type":"link","label":"System Design","href":"/docs/Design/DesignDiagram","docId":"Design/DesignDiagram"},{"type":"link","label":"Frontend Interface","href":"/docs/Design/Frontend","docId":"Design/Frontend"},{"type":"link","label":"Algebra Layer","href":"/docs/Design/Algebra Layer","docId":"Design/Algebra Layer"},{"type":"link","label":"Schema Layer","href":"/docs/Design/Schema Layer","docId":"Design/Schema Layer"},{"type":"link","label":"Block Access Layer","href":"/docs/Design/Block Access Layer","docId":"Design/Block Access Layer"},{"type":"link","label":"Cache Layer","href":"/docs/Design/Cache Layer","docId":"Design/Cache Layer"},{"type":"link","label":"B+ Tree Layer","href":"/docs/Design/B+ Tree Layer","docId":"Design/B+ Tree Layer"},{"type":"link","label":"Buffer Layer","href":"/docs/Design/Buffer Layer","docId":"Design/Buffer Layer"},{"type":"link","label":"Physical Layer","href":"/docs/Design/Physical Layer","docId":"Design/Physical Layer"}],"Roadmap":[{"type":"link","label":"Introduction","href":"/docs/Roadmap/","docId":"Roadmap/index"},{"type":"link","label":"Stage 0 : Installation and Preparation","href":"/docs/Roadmap/Stage00","docId":"Roadmap/Stage00"},{"type":"link","label":"Stage 1 : Understanding the Disk Interface","href":"/docs/Roadmap/Stage01","docId":"Roadmap/Stage01"},{"type":"link","label":"Stage 2: Record Blocks and Catalogs","href":"/docs/Roadmap/Stage02","docId":"Roadmap/Stage02"},{"type":"link","label":"Stage 3 : The Disk Buffer and Catalog Caches","href":"/docs/Roadmap/Stage03","docId":"Roadmap/Stage03"},{"type":"link","label":"Stage 4 : Linear Search on Relations","href":"/docs/Roadmap/Stage04","docId":"Roadmap/Stage04"},{"type":"link","label":"Stage 5 : Opening Relations","href":"/docs/Roadmap/Stage05","docId":"Roadmap/Stage05"},{"type":"link","label":"Stage 6 : Writing Back to the Disk","href":"/docs/Roadmap/Stage06","docId":"Roadmap/Stage06"}],"Commands":[{"type":"link","label":"User Interface Commands","href":"/docs/User Interface Commands/","docId":"User Interface Commands/index"},{"type":"link","label":"Data Definition Language Commands","href":"/docs/User Interface Commands/ddl","docId":"User Interface Commands/ddl"},{"type":"link","label":"Data Manipulation Language Commands","href":"/docs/User Interface Commands/dml","docId":"User Interface Commands/dml"},{"type":"link","label":"XFS Commands","href":"/docs/User Interface Commands/efs","docId":"User Interface Commands/efs"},{"type":"link","label":"Script Commands","href":"/docs/User Interface Commands/script-cmds","docId":"User Interface Commands/script-cmds"}]},"docs":{"Design/Algebra Layer":{"id":"Design/Algebra Layer","title":"Algebra Layer","description":"Layout","sidebar":"Design"},"Design/Architecture":{"id":"Design/Architecture","title":"Architecture","description":"NITCbase has a seven layer design. This section provides documentation for each of the seven layers and certain additional design specific details.","sidebar":"Design"},"Design/B+ Tree Layer":{"id":"Design/B+ Tree Layer","title":"B+ Tree Layer","description":"- B+ Trees","sidebar":"Design"},"Design/Block Access Layer":{"id":"Design/Block Access Layer","title":"Block Access Layer","description":"The Block Access Layer code is to be written in BlockAccess.cpp and it\'s header file BlockAccess.h","sidebar":"Design"},"Design/Buffer Layer":{"id":"Design/Buffer Layer","title":"Buffer Layer","description":"The Buffer Layer code is to be written in 2 pairs of files:","sidebar":"Design"},"Design/Cache Layer":{"id":"Design/Cache Layer","title":"Cache Layer","description":"The Cache Layer code is to be written in 3 pairs of files:","sidebar":"Design"},"Design/DesignDiagram":{"id":"Design/DesignDiagram","title":"System Design","description":"The following System Design Diagram shows the commands / functions to be implemented by students at each layer and also shows their invocation order:","sidebar":"Design"},"Design/Frontend":{"id":"Design/Frontend","title":"Frontend Interface","description":"Introduction","sidebar":"Design"},"Design/Physical Layer":{"id":"Design/Physical Layer","title":"Physical Layer","description":"The disk binary file that simulates the NITCbase disk (and the run copy of disk called diskruncopy) is located in the Disk/ directory.","sidebar":"Design"},"Design/Schema Layer":{"id":"Design/Schema Layer","title":"Schema Layer","description":"The Schema Layer code is to be written in Schema.cpp and it\'s header file Schema.h","sidebar":"Design"},"Misc/B+ Trees":{"id":"Misc/B+ Trees","title":"B+ Trees","description":"We know that the objective of indexing is to make the retrieval of records quicker. The key to achieve this lies in the choice of a suitable underlying data structure that defines the structure of index in the disk. NITCbase uses the B+ tree data structure for indexing."},"Misc/GDB":{"id":"Misc/GDB","title":"GNU Debugger(GDB)","description":"Introduction"},"Misc/index":{"id":"Misc/index","title":"Miscellaneous Pages","description":"This page contains supplementary guides and documentation which are to be referenced by you as you proceed through the roadmap. You will be linked to the appropriate pages as needed. However, an index of the pages present are provided below in case you want to quickly jump to a page."},"Misc/Indexing":{"id":"Misc/Indexing","title":"Indexing in NITCbase","description":"Introduction"},"Misc/Installation Guidelines":{"id":"Misc/Installation Guidelines","title":"Installation Guidelines","description":"The recommended way to work on NITCbase is using a dedicated docker container. Docker allows us to maintain a consistent experience across all the Linux distributions and versions of core utilities you might have installed."},"Misc/ManualSetup":{"id":"Misc/ManualSetup","title":"Manual Setup","description":"The following setup instructions assume that you have a Linux based machine."},"Misc/XFS Interface":{"id":"Misc/XFS Interface","title":"XFS Interface","description":"XFS Interface is an external command-line interface to access the NITCBase filesystem from the host (UNIX) system."},"Roadmap/index":{"id":"Roadmap/index","title":"Introduction","description":"This roadmap is divided into stages. From Stage 2, you will build NITCbase incrementally. Links are provided throughout the document for further reference. There are two kinds of links. The contents of the important links must be read immediately before proceeding with the roadmap. The informative links may be clicked for more information about a particular concept. However this information may not be necessary at that point and you may proceed with the roadmap without visiting these links.","sidebar":"Roadmap"},"Roadmap/Stage00":{"id":"Roadmap/Stage00","title":"Stage 0 : Installation and Preparation","description":"- Setup the environment to build NITCbase","sidebar":"Roadmap"},"Roadmap/Stage01":{"id":"Roadmap/Stage01","title":"Stage 1 : Understanding the Disk Interface","description":"- Learn to read/write disk blocks to/from the XFS disk to memory using the Disk class.","sidebar":"Roadmap"},"Roadmap/Stage02":{"id":"Roadmap/Stage02","title":"Stage 2: Record Blocks and Catalogs","description":"- Understand the storage model for records in NITCbase","sidebar":"Roadmap"},"Roadmap/Stage03":{"id":"Roadmap/Stage03","title":"Stage 3 : The Disk Buffer and Catalog Caches","description":"- Understand disk buffering in NITCbase in the Buffer Layer","sidebar":"Roadmap"},"Roadmap/Stage04":{"id":"Roadmap/Stage04","title":"Stage 4 : Linear Search on Relations","description":"- Familiarise with the mechanism of receiving commands from the Frontend User Interface and calling the appropriate function in the lower layers through the Frontend Programming Interface","sidebar":"Roadmap"},"Roadmap/Stage05":{"id":"Roadmap/Stage05","title":"Stage 5 : Opening Relations","description":"- Familiarise with the design of the Cache Layer and understand the maintenance of the catalog caches","sidebar":"Roadmap"},"Roadmap/Stage06":{"id":"Roadmap/Stage06","title":"Stage 6 : Writing Back to the Disk","description":"- Implement the commands to rename relations and attributes","sidebar":"Roadmap"},"User Interface Commands/ddl":{"id":"User Interface Commands/ddl","title":"Data Definition Language Commands","description":"The Data Definition Language(DDL) commands are used to define the database schema. They are used to create and delete relations, modify the structure of relations in the database and also create and delete indexes on the attributes of relations. DDL Commands are supported by both XFS Interface and Frontend Interface. The following are the DDL commands supported by NITCBase.","sidebar":"Commands"},"User Interface Commands/dml":{"id":"User Interface Commands/dml","title":"Data Manipulation Language Commands","description":"The Data Manipulation Language(DML) commands are used to manipulate the data stored in the relations of the database. DML Commands are supported by both XFS Interface and Frontend Interface. The following are the DML commands supported by NITCBase.","sidebar":"Commands"},"User Interface Commands/efs":{"id":"User Interface Commands/efs","title":"XFS Commands","description":"The XFS commands are used to format the disk, dump disk data structures like Block Allocation Map, Relation Catalog and Attribute Catalog, load / remove relations, list relations and copy the records of a relation on the NITCbase disk to a UNIX file. These commands are only available for the XFS Interface. The following are the XFS commands supported by NITCBase.","sidebar":"Commands"},"User Interface Commands/index":{"id":"User Interface Commands/index","title":"User Interface Commands","description":"NITCbase supports two user interfaces namely, XFS Interface and Frontend Interface. The commands supported by the two interfaces fall into the following four categories:","sidebar":"Commands"},"User Interface Commands/script-cmds":{"id":"User Interface Commands/script-cmds","title":"Script Commands","description":"Script commands are available for both XFS interface and frontend interface. These commands help the user to execute mutliple commands sequentially from a file and also to print out custom useful messages into terminal for debugging and informational purposes.","sidebar":"Commands"}}}')}}]);