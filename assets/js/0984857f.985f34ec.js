"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[1466],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),i=n(6010),l=n(2389),o=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:l,defaultValue:d,values:m,groupId:f,className:h}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,o.l)(b,((e,t)=>e.value===t.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===d?d:d??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,s.U)(),[w,C]=(0,r.useState)(g),I=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=f){const e=y[f];null!=e&&e!==w&&b.some((t=>t.value===e))&&C(e)}const T=e=>{const t=e.currentTarget,n=I.indexOf(t),a=b[n].value;a!==w&&(x(t),C(a),null!=f&&v(f,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},h)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>I.push(e),onKeyDown:O,onClick:T},l,{className:(0,i.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,r.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},8861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),l=n(5162);const o={sidebar_position:1,title:"Installation Guidelines"},s="Installation",u={unversionedId:"Misc/Installation Guidelines",id:"Misc/Installation Guidelines",title:"Installation Guidelines",description:"Setup",source:"@site/docs/Misc/Installation Guidelines.md",sourceDirName:"Misc",slug:"/Misc/Installation Guidelines",permalink:"/docs/Misc/Installation Guidelines",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Installation Guidelines"},sidebar:"Misc",next:{title:"Docker Based Setup",permalink:"/docs/Misc/DockerSetup"}},c={},p=[{value:"Setup",id:"setup",level:2},{value:"Files and Directories",id:"files-and-directories",level:2},{value:"Running the XFS Interface",id:"running-the-xfs-interface",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The following setup instructions assume that you have a Linux based machine. If you face any difficulties during the environment setup or you are running Windows or Mac operating system and do not want to set up a linux box, you can try the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Misc/DockerSetup"},"Docker based setup given here"),".\nNote: Windows installation of docker requires WSL2.")),(0,r.kt)("p",null,"The following are the instructions for installation in linux/unix environments:"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"ubuntu",label:"Ubuntu / Debian",default:!0,mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update;\nsudo apt-get install -y build-essential cmake gcc wget curl\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Sf https://raw.githubusercontent.com/nitcbase/nitcbase-bootstrap/main/setup.sh | sh\n"))))),(0,r.kt)(l.Z,{value:"fedora",label:"Fedora / Red Hat",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install cmake make automake gcc gcc-c++ kernel-devel wget curl\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/nitcbase/nitcbase-bootstrap/main/setup.sh | sh\n"))))),(0,r.kt)(l.Z,{value:"arch",label:"Arch Linux",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -Syy\nsudo pacman -Sy base-devel cmake gcc wget curl\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/nitcbase/nitcbase-bootstrap/main/setup.sh | sh\n")))))),(0,r.kt)("p",null,"On successful execution of the script, a new ",(0,r.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project."),(0,r.kt)("h2",{id:"files-and-directories"},"Files and Directories"),(0,r.kt)("p",null,"When the setup is done, the following directories should be present in your ",(0,r.kt)("inlineCode",{parentName:"p"},"NITCbase")," folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"  NITCbase\n  .\n  \u251c\u2500\u2500 Disk\n  \u251c\u2500\u2500 XFS_Interface\n  \u251c\u2500\u2500 Files\n  \u2502\xa0\xa0 \u251c\u2500\u2500 Batch_Execution_Files\n  \u2502\xa0\xa0 \u251c\u2500\u2500 Input_Files\n  \u2502\xa0\xa0 \u2514\u2500\u2500 Output_Files\n  \u2514\u2500\u2500 mynitcbase\n      \u251c\u2500\u2500 define\n   \xa0\xa0 \u251c\u2500\u2500 Disk_Class\n   \xa0\xa0 \u251c\u2500\u2500 Buffer\n   \xa0\xa0 \u251c\u2500\u2500 Cache\n   \xa0\xa0 \u251c\u2500\u2500 BPlusTree\n   \xa0\xa0 \u251c\u2500\u2500 Schema\n   \xa0\xa0 \u251c\u2500\u2500 Algebra\n   \xa0\xa0 \u251c\u2500\u2500 Frontend\n   \xa0\xa0 \u251c\u2500\u2500 Frontend_Interface\n      .\n      .\n      .\n")),(0,r.kt)("p",null,"Notable directories / files include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Disk/")," : contains the ",(0,r.kt)("inlineCode",{parentName:"li"},"disk")," binary file on which NITCbase Disk is simulated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"XFS_Interface/")," : Contains the source files for the xfs interface. Once built succesfully, the ",(0,r.kt)("inlineCode",{parentName:"li"},"xfs-interface")," executable will be present here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mynitcbase")," : This is the folder where you'll be working in to implement all the layers of NITCbase. The corresponding folders should be present inside."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mynitcbase/Disk_Class/")," : contains the ",(0,r.kt)("inlineCode",{parentName:"li"},"Disk.cpp")," file which encompasses the Disk Class described in the Physical Layer. Students should ",(0,r.kt)("strong",{parentName:"li"},"only")," use the Disk Class Object instantiation for doing disk access (read & write and create & destroy)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mynitcbase/Frontend_Interface")," : contains the full implementation of the frontend interface which is responsible for receiving commands from the user and calling the appropriate method in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Frontend")," class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mynitcbase/define/")," : contains the global constants."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Files/"),": Within this folder, three sub-directories can be found:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/Batch_Execution_FIles")," - files taken as input by ",(0,r.kt)("inlineCode",{parentName:"li"},"run")," command is organized and fetched from here (run files)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/Input_Files")," - Input data files for commands like ",(0,r.kt)("inlineCode",{parentName:"li"},"import"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"insert from file")," etc. are organized and fetched from here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/Output_Files")," - Output data files generated from ",(0,r.kt)("inlineCode",{parentName:"li"},"dump")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"export")," are organized and placed here.")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We can use sub-directories within ",(0,r.kt)("inlineCode",{parentName:"p"},"/Files/Batch_Execution_Files")," to organize the run files. In that case, ",(0,r.kt)("inlineCode",{parentName:"p"},"run folder_name/run_file")," format can be used.")),(0,r.kt)("h2",{id:"running-the-xfs-interface"},"Running the XFS Interface"),(0,r.kt)("p",null,"Now that we have all the required files, we can initialise our disk using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Misc/XFS%20Interface"},"XFS Interface")," and start working on NITCbase."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("inlineCode",{parentName:"li"},"XFS_Interface")," folder and run the following commands.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./xfs-interface\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"You should now be inside the XFS interface prompt. We will run the ",(0,r.kt)("a",{parentName:"li",href:"/docs/User%20Interface%20Commands/efs#format-disk"},"fdisk")," command to create our disk.xfs file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# fdisk\n")),(0,r.kt)("p",null,"You should see the following."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# fdisk\nDisk formatted\n#\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Now that we have our disk file, we can exit the XFS interface by entering exit.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# exit\n")),(0,r.kt)("p",null,"With that, you should be ready to start working on NITCbase. Good luck!"))}m.isMDXComponent=!0}}]);