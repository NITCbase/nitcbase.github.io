"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[8976],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(t),m=a,d=h["".concat(i,".").concat(m)]||h[m]||p[m]||o;return t?n.createElement(d,c(c({ref:r},u),{},{components:t})):n.createElement(d,c({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=h;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var s=2;s<o;s++)c[s]=t[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8097:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1,title:"Frontend Programming Interface"},c="Frontend Programming Interface Stub Code",l={unversionedId:"Misc/stub/frontend",id:"Misc/stub/frontend",title:"Frontend Programming Interface",description:"Frontend.cpp",source:"@site/docs/Misc/stub/frontend.md",sourceDirName:"Misc/stub",slug:"/Misc/stub/frontend",permalink:"/docs/Misc/stub/frontend",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Frontend Programming Interface"},sidebar:"stubSidebar",next:{title:"Algebra Layer",permalink:"/docs/Misc/stub/algebra"}},i={},s=[{value:"Frontend.cpp",id:"frontendcpp",level:2}],u={toc:s};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"frontend-programming-interface-stub-code"},"Frontend Programming Interface Stub Code"),(0,a.kt)("h2",{id:"frontendcpp"},"Frontend.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'int Frontend::create_table(char relname[ATTR_SIZE],\n                           int no_attrs,\n                           char attributes[][ATTR_SIZE],\n                           int type_attrs[]) {\n\n    // Call createRel() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::drop_table(char relname[ATTR_SIZE]) {\n    // Call deleteRel() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::open_table(char relname[ATTR_SIZE]) {\n    // Call openRel() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::close_table(char relname[ATTR_SIZE]) {\n    // Call closeRel() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint create_index(char relname[ATTR_SIZE], char attrname[ATTR_SIZE]) {\n    // Call createIndex() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint drop_index(char relname[ATTR_SIZE], char attrname[ATTR_SIZE]) {\n    // Call dropIndex() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::alter_table_rename(char relname_from[ATTR_SIZE], char relname_to[ATTR_SIZE]) {\n    // Call renameRel() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::alter_table_rename_column(char relname[ATTR_SIZE], char attrname_from[ATTR_SIZE],\n                                        char attrname_to[ATTR_SIZE]) {\n    // Call renameAttr() method of the Schema Layer with correct arguments\n\n    // Return Success and Error values appropriately\n}\n\n\nint Frontend::insert_into_table_values(char relname[ATTR_SIZE], int attr_count,\n                                       char attr_values[][ATTR_SIZE]) {\n\n\n    // Call insert() method of the Algebra Layer with correct arguments\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::select_from_table(char relname_source[ATTR_SIZE], char relname_target[ATTR_SIZE]) {\n\n    // Call appropriate project() method of the Algebra Layer\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::select_attrlist_from_table(char relname_source[ATTR_SIZE],\n                                         char relname_target[ATTR_SIZE],\n                                         int attr_count,\n                                         char attr_list[][ATTR_SIZE]) {\n\n    // Call appropriate project() method of the Algebra Layer\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::select_from_table_where(char relname_source[ATTR_SIZE],\n                                      char relname_target[ATTR_SIZE],\n                                      char attribute[ATTR_SIZE]\n                                      int op, char value[ATTR_SIZE]) {\n\n    // Call select() method of the Algebra Layer with correct arguments\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::select_attrlist_from_table_where(\n    char relname_source[ATTR_SIZE], char relname_target[ATTR_SIZE],\n    int attr_count, char attr_list[][ATTR_SIZE],\n    char attribute[ATTR_SIZE], int op, char value[ATTR_SIZE]) {\n\n\n    // Call select() method of the Algebra Layer with correct arguments to\n    // create a temporary target relation with name ".temp" (use constant TEMP)\n\n    // TEMP will contain all the attributes of the source relation as it is the\n    // result of a select operation\n\n    // Return Error values, if not successful\n\n    // Open the TEMP relation using OpenRelTable::openRel()\n    // if open fails, delete TEMP relation using Schema::deleteRel() and\n    // return the error code\n\n    // On the TEMP relation, call project() method of the Algebra Layer with\n    // correct arguments to create the actual target relation. The final\n    // target relation contains only those attributes mentioned in attr_list\n\n    // close the TEMP relation using OpenRelTable::closeRel()\n    // delete the TEMP relation using Schema::deleteRel()\n\n    // return any error codes from project() or SUCCESS otherwise\n}\n\n\nint Frontend::select_from_join_where(\n    char relname_source_one[ATTR_SIZE], char relname_source_two[ATTR_SIZE],\n    char relname_target[ATTR_SIZE],\n    char join_attr_one[ATTR_SIZE], char join_attr_two[ATTR_SIZE]) {\n\n    // Call join() method of the Algebra Layer with correct arguments\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::select_attrlist_from_join_where(\n    char relname_source_one[ATTR_SIZE], char relname_source_two[ATTR_SIZE],\n    char relname_target[ATTR_SIZE], char join_attr_one[ATTR_SIZE],\n    char join_attr_two[ATTR_SIZE], int attr_count, char attr_list[][ATTR_SIZE]) {\n\n    // Call join() method of the Algebra Layer with correct arguments to\n    // create a temporary target relation with name TEMP.\n\n    // TEMP results from the join of the two source relation (and hence it\n    // contains all attributes of the source relations except the join attribute\n    // of the second source relation)\n\n    // Return Error values, if not successful\n\n    // Open the TEMP relation using OpenRelTable::openRel()\n    // if open fails, delete TEMP relation using Schema::deleteRel() and\n    // return the error code\n\n    // Call project() method of the Algebra Layer with correct arguments to\n    // create the actual target relation from the TEMP relation.\n    // (The final target relation contains only those attributes mentioned in attr_list)\n\n    // close the TEMP relation using OpenRelTable::closeRel()\n    // delete the TEMP relation using Schema::deleteRel()\n\n    // Return Success or Error values appropriately\n}\n\n\nint Frontend::custom_function(int argc, char argv[][ATTR_SIZE]) {\n  // argc gives the size of the argv array\n  // argv stores every token delimited by space and comma\n\n  // implement whatever you desire\n\n}\n')))}p.isMDXComponent=!0}}]);