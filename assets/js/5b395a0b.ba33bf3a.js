"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[3096],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),h=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=h(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),f=h(n),u=a,C=f["".concat(c,".").concat(u)]||f[u]||s[u]||i;return n?r.createElement(C,l(l({ref:t},d),{},{components:n})):r.createElement(C,l({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var h=2;h<i;h++)l[h]=n[h];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9557:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},l="Cache Layer Stub Code",o={type:"mdx",permalink:"/stub/cache_stub",source:"@site/src/pages/stub/cache_stub.md",title:"Cache Layer Stub Code",description:"RelCacheTable.cpp",frontMatter:{}},c=[{value:"RelCacheTable.cpp",id:"relcachetablecpp",level:2},{value:"RelCacheTable.h",id:"relcachetableh",level:2},{value:"AttrCacheTable.cpp",id:"attrcachetablecpp",level:2},{value:"AttrCacheTable.h",id:"attrcachetableh",level:2},{value:"OpenRelTable.cpp",id:"openreltablecpp",level:2},{value:"OpenRelTable.h",id:"openreltableh",level:2}],h={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cache-layer-stub-code"},"Cache Layer Stub Code"),(0,a.kt)("h2",{id:"relcachetablecpp"},"RelCacheTable.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "RelCacheTable.h"\n#include "OpenRelTable.h"\n\nRelCacheEntry *RelCacheTable::relCache[MAX_OPEN];\n\nint RelCacheTable::getRelCatEntry(int relId, RelCatEntry *relCatBuf) {\n    // if relId is outside the range [0, MAX_OPEN-1] return E_OUTOFBOUND\n\n    // if entry corresponding to the relId in the Relation Cache Table is free\n\n    //copy the corresponding Relation Catalog entry in the Relation Cache Table to relCatBuf.\n\n    // return SUCCESS\n}\n\nint RelCacheTable::setRelCatEntry(int relId, RelCatEntry *relCatBuf) {\n    // if relId is outside the range [0, MAX_OPEN-1] return E_OUTOFBOUND\n\n    // if entry corresponding to the relId in the Relation Cache Table is free\n\n    //copy the relCatBuf to the corresponding Relation Catalog entry in the Relation Cache Table.\n\n    //set the dirty flag of the corresponding Relation Cache entry in the Relation Cache Table.\n\n    // return SUCCESS\n}\n\nint RelCacheTable::getSearchIndex(int relId, RecId *searchIndex) {\n    // if relId is outside the range [0, MAX_OPEN-1] return E_OUTOFBOUND\n\n    // if entry corresponding to the relId in the Relation Cache Table is free\n\n    // copy the searchIndex field of the Relation Cache entry corresponding to input relId to searchIndex variable.\n\n    // return SUCCESS\n}\n\nint RelCacheTable::setSearchIndex(int relId, RecId *searchIndex) {\n    // if relId is outside the range [0, MAX_OPEN-1] return E_OUTOFBOUND\n\n    // if entry corresponding to the relId in the Relation Cache Table is free\n\n    // copy the searchIndex variable to the searchIndex field of the Relation Cache entry corresponding to input relId.\n\n    // return SUCCESS\n}\n\nvoid RelCacheTable::recordToRelCacheEntry(union Attribute record[RELCAT_NO_ATTRS], RelCacheEntry *relCacheEntry) {\n    /*\n     * The dirty, recId, and searchIndex fields are initialised with default values of\n     * false, {-1, -1}, and {-1, -1}, respectively\n     */\n    // The record content is used to populate the relCatEntry field\n}\n\nvoid RelCacheTable::relCacheEntryToRecord(union Attribute record[RELCAT_NO_ATTRS], RelCacheEntry *relCacheEntry) {\n    //  The record is populated with the contents of the relCatEntry field.\n    //  The dirty, recId, and searchIndex fields are used only during runtime and are not written to the disk.\n}\n\n')),(0,a.kt)("h2",{id:"relcachetableh"},"RelCacheTable.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#ifndef NITCBASE_RELCACHETABLE_H\n#define NITCBASE_RELCACHETABLE_H\n\n#include "../define/constants.h"\n#include "../Buffer/BlockBuffer.h"\n\ntypedef struct RelCatEntry {\n\n    unsigned char relName[ATTR_SIZE];\n    int numAttrs;\n    int numRecs;\n    int firstBlk;\n    int lastBlk;\n    int numSlotsPerBlk;\n\n} RelCatEntry;\n\ntypedef struct RelCacheEntry {\n\n    RelCatEntry relCatEntry;\n    bool dirty;\n    RecId recId;\n    RecId searchIndex;\n\n} RelCacheEntry;\n\nclass RelCacheTable {\n\n    friend class OpenRelTable;\n\npublic:\n    //methods\n    static int getRelCatEntry(int relId, RelCatEntry *relCatBuf);\n    static int setRelCatEntry(int relId, RelCatEntry *relCatBuf);\n    static int getSearchIndex(int relId, RecId *searchIndex);\n    static int setSearchIndex(int relId, RecId *searchIndex);\n\nprivate:\n    //field\n    static RelCacheEntry* relCache[MAX_OPEN];\n\n    //methods\n    static void recordToRelCacheEntry(union Attribute record[RELCAT_NO_ATTRS], RelCacheEntry* relCacheEntry);\n    static void relCacheEntryToRecord(union Attribute record[RELCAT_NO_ATTRS], RelCacheEntry* relCacheEntry);\n\n};\n#endif //NITCBASE_RELCACHETABLE_H\n')),(0,a.kt)("h2",{id:"attrcachetablecpp"},"AttrCacheTable.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "AttrCacheTable.h"\n#include "../define/constants.h"\n#include "../define/errors.h"\n\nAttrCacheEntry * AttrCacheTable::attrCache[MAX_OPEN];\n\nint AttrCacheTable::getAttrCatEntry(int relId, unsigned char attrName[ATTR_SIZE]/int attrOffset, AttrCatEntry *attrCatBuf) {\n    \n    if relId is outside the range [0, MAX_OPEN-1]:\n    {\n        return E_OUTOFBOUND;\n    }\n    \n    if entry corresponding to the relId in the Attribute Cache Table is free:\n    {\n        return E_NOTOPEN;\n    }\n    \n    // iterate over all the attributes in the Attribute Cache Table corresponding to the relation with relId.\n    {\n        // if the attrName/offset field of the Attribute Catalog entry is equal to the input attrName/attrOffset:\n        {\n            // copy that Attribute Catalog entry in the Attribute Cache Table to attrCatBuf.\n            \n            return SUCCESS;\n        }\n    }\n    \n    return E_ATTRNOTEXIST;\n    \n}\n\nint AttrCacheTable::setAttrCatEntry(relId relId, unsigned char attrName[ATTR_SIZE]/int attrOffset, AttrCatEntry *attrCatBuf) {\n    \n    if relId is outside the range [0, MAX_OPEN-1]:\n    {\n        return E_OUTOFBOUND;\n    }\n    \n    if entry corresponding to the relId in the Attribute Cache Table is free:\n    {\n        return E_NOTOPEN;\n    }\n    \n    // iterate over all the attributes in the Attribute Cache Table corresponding to the relation with relId.\n    {\n        // if the attrName/offset field of the Attribute Catalog entry is equal to the input attrName/attrOffset:\n        {\n            // copy the attrCatBuf to the corresponding Attribute Catalog entry in the Attribute Cache Table.\n            \n            // set the dirty flag of the corresponding Attribute Cache entry in the Attribute Cache Table.\n            \n            return SUCCESS;\n        }\n    }\n    \n    return E_ATTRNOTEXIST;\n    \n}\n\nint AttrCacheTable::getSearchIndex(int relId, unsigned char attrName[ATTR_SIZE]/int attrOffset, IndexId *searchIndex) {\n    \n    if relId is outside the range [0, MAX_OPEN-1]:\n    {\n        return E_OUTOFBOUND;\n    }\n    \n    if entry corresponding to the relId in the Attribute Cache Table is free:\n    {\n        return E_NOTOPEN;\n    }\n    \n    // iterate over all the attributes in the Attribute Cache Table corresponding to the relation with relId.\n    {\n        // if the attrName/offset field of the Attribute Catalog entry is equal to the input attrName/attrOffset:\n        {\n        \n            //copy the searchIndex field of the corresponding Attribute Cache entry in the Attribute Cache Table to input searchIndex variable.\n\n            return SUCCESS;\n        }\n    }\n    \n    return E_ATTRNOTEXIST;\n    \n}\n\nint AttrCacheTable::setSearchIndex(relId relId, unsigned char attrName[ATTR_SIZE]/int attrOffset, IndexId *searchIndex) {\n    \n    if relId is outside the range [0, MAX_OPEN-1]:\n    {\n        return E_OUTOFBOUND;\n    }\n    \n    if entry corresponding to the relId in the Attribute Cache Table is free:\n    {\n        return E_NOTOPEN;\n    }\n    \n    // iterate over all the attributes in the Attribute Cache Table corresponding to the relation with relId.\n    {\n        // if the attrName/offset field of the Attribute Catalog entry is equal to the input attrName/attrOffset:\n        {\n            // copy the input searchIndex variable to the searchIndex field of the corresponding Attribute Cache entry in the Attribute Cache Table.\n            \n            return SUCCESS;\n        }\n    }\n    \n    return E_ATTRNOTEXIST;\n    \n}\n\nvoid AttrCacheTable::recordToAttrCacheEntry(union Attribute record[ATTRCAT_NO_ATTRS], AttrCacheEntry *attrCacheEntry) {\n}\n\n\nvoid AttrCacheTable::attrCacheEntryToRecord(union Attribute record[ATTRCAT_NO_ATTRS], AttrCacheEntry *attrCacheEntry) {\n}\n\n')),(0,a.kt)("h2",{id:"attrcachetableh"},"AttrCacheTable.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#ifndef NITCBASE_ATTRCACHETABLE_H\n#define NITCBASE_ATTRCACHETABLE_H\n\n#include "../define/constants.h"\n#include "../Buffer/BlockBuffer.h"\n\ntypedef struct AttrCatEntry {\n\n    unsigned char relName[ATTR_SIZE];\n    unsigned char attrName[ATTR_SIZE];\n    int attrType;\n    bool primaryFlag;\n    int rootBlock;\n    int offset;\n\n} AttrCatEntry;\n\ntypedef struct AttrCacheEntry {\n\n    AttrCatEntry attrCatEntry;\n    bool dirty;\n    RecId recId;\n    IndexId searchIndex;\n    struct AttrCacheEntry *next;\n\n} AttrCacheEntry;\n\nclass AttrCacheTable {\n\n    friend class OpenRelTable;\n\npublic:\n    //methods\n    static int getAttrCatEntry(int relId, unsigned char attrName[ATTR_SIZE], AttrCatEntry *attrCatBuf);\n    static int getAttrCatEntry(int relId, int attrOffset, AttrCatEntry *attrCatBuf);\n    static int setAttrCatEntry(int relId, unsigned char attrName[ATTR_SIZE], AttrCatEntry *attrCatBuf);\n    static int setAttrCatEntry(int relId, int attrOffset, AttrCatEntry *attrCatBuf);\n    static int getSearchIndex(int relId, unsigned char attrName[ATTR_SIZE], IndexId *searchIndex);\n    static int getSearchIndex(int relId, int attrOffset, IndexId *searchIndex);\n    static int setSearchIndex(int relId, unsigned char attrName[ATTR_SIZE], IndexId *searchIndex);\n    static int setSearchIndex(int relId, int attrOffset, IndexId *searchIndex);\n\nprivate:\n    //field\n    static AttrCacheEntry* attrCache[MAX_OPEN];\n\n    //methods\n    static void recordToAttrCacheEntry(union Attribute record[ATTRCAT_NO_ATTRS], AttrCacheEntry *attrCacheEntry);\n    static void attrCacheEntryToRecord(union Attribute record[ATTRCAT_NO_ATTRS], AttrCacheEntry *attrCacheEntry);\n\n};\n\n#endif //NITCBASE_ATTRCACHETABLE_H\n')),(0,a.kt)("h2",{id:"openreltablecpp"},"OpenRelTable.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "OpenRelTable.h"\n#include "RelCacheTable.h"\n#include "AttrCacheTable.h"\n\nOpenRelTableMetaInfo OpenRelTable::tableMetaInfo[MAX_OPEN];\n\nOpenRelTable::OpenRelTable() {\n\n    // initialize tableMetaInfo of all the entries of the Open Relation Table with free as true and relName as an empty string.\n\n    /************ Setting up Relation Catalog relation in the cache ************/\n\n    /**** setting up Relation Catalog relation in the Relation Cache Table ****/\n\n    /* read the record entry at index 0 from block 4, the block corresponding to Relation Catalog in the disk, and create a Relation Cache entry on it\n       using RecBuffer::getRecord() and RelCacheTable::recordToRelCacheEntry().\n       update the recId field of this Relation Cache entry to {4,0}.\n       use it to set the 0th index entry of the RelCacheTable.*/\n\n    /**** setting up Relation Catalog relation in the Attribute Cache Table ****/\n\n    // let listHead be used to hold the head of the linked list of Attribute Cache entries.\n    AttrCacheEntry listHead;\n\n    for i from 0 to 5:\n    {\n\n        /* read the ith record entry from bock 5, the block corresponding to Attribute Catalog in the disk, and create an Attribute Cache entry on it\n       using RecBuffer::getRecord() and AttrCacheTable::recordToAttrCacheEntry().\n       update the recId field of this Attribute Cache entry to {5,i}.\n       add the Attribute Cache entry to the linked list of listHead .*/\n    }\n\n    // set the 0th entry of the AttrCacheTable to listHead.\n\n    /**** setting up Relation Catalog relation in the Open Relation Table ****/\n\n    //update the 0th entry of the tableMetaInfo with free as false and relName as the \'RelCatalog\'.\n\n    /************ Setting up Attribute Catalog relation in the cache ************/\n\n    /**** setting up Attribute Catalog relation in the Relation Cache Table ****/\n\n    /* read the record entry at index 1 from block 4, the block corresponding to Relation Catalog in the disk, and create a Relation Cache entry on it\n       using RecBuffer::getRecord() and RelCacheTable::recordToRelCacheEntry().\n       update the recId field of this Relation Cache entry to {4,1}.\n       use it to set the 1st index entry of the RelCacheTable.*/\n\n    /**** setting up Attribute Catalog relation in the Attribute Cache Table ****/\n\n    // use listHead  to hold the head of the linked list of Attribute Cache entries.\n\n    for i from 6 to 11:\n    {\n\n        /* read the ith record entry from bock 5, the block corresponding to Attribute Catalog in the disk, and create an Attribute Cache entry on it\n       using RecBuffer::getRecord() and AttrCacheTable::recordToAttrCacheEntry().\n       update the recId field of this Attribute Cache entry to {5,i}.\n       add the Attribute Cache entry to the linked list of listHead .*/\n    }\n\n    // set the 1st entry of the AttrCacheTable to listHead.\n\n    /**** setting up Attribute Catalog relation in the Open Relation Table ****/\n\n    //update the 1st entry of the tableMetaInfo with free as false and relName as the \'AttrCatalog\'.\n\n}\n\nOpenRelTable::~OpenRelTable() {\n\n    for i from 2 to MAX_OPEN-1:\n    {\n        if ith relation is still open:\n        {\n\n            // close the relation using openRelTable::closeRel().\n\n        }\n    }\n\n    /************ Closing Attribute Catalog relation in the cache ************/\n\n    /****** releasing the entry corresponding to Attribute Catalog relation from Relation Cache Table ******/\n\n    // if the Relation Catalog entry of the ATTRCAT_RELIDth Relation Cache entry has been modified:\n    {\n        /* Get the Relation Catalog entry from Cache using RelCacheTable::relCacheEntryToRecord().\n                Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n    }\n\n    /****** releasing the entry corresponding to Attribute Catalog relation from Attribute Cache Table ******/\n\n    // iterate over all the entries in the linked list of the ATTRCAT_RELIDth Attribute Cache entry.\n    {\n        if the entry has been modified:\n        {\n            /* Get the Attribute Catalog entry from Cache using AttrCacheTable::attrCacheEntryToRecord().\n             Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n\n        }\n\n        // free the memory dynamically alloted to this entry in Attribute Cache linked list.\n    }\n\n    /****** updating metadata corresponding to Attribute Catalog relation in the Open Relation Table ******/\n\n    //free the ATTRCAT_RELIDth entry of the tableMetaInfo.\n\n    /************ Closing Relation Catalog relation in the cache ************/\n\n    /****** releasing the entry corresponding to Relation Catalog relation from Relation Cache Table ******/\n\n    // if the Relation Catalog entry of the RELCAT_RELIDth Relation Cache entry has been modified:\n    {\n        /* Get the Relation Catalog entry from Cache using RelCacheTable::relCacheEntryToRecord().\n        Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n    }\n\n    /****** releasing the entry corresponding to Relation Catalog relation from Attribute Cache Table ******/\n\n    // iterate over all the entries in the linked list of the RELCAT_RELIDth Attribute Cache entry.\n    {\n        if the entry has been modified:\n        {\n            /* Get the Attribute Catalog entry from Cache using AttrCacheTable::attrCacheEntryToRecord().\n             Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n\n        }\n\n        // free the memory dynamically alloted to this entry in Attribute Cache linked list.\n    }\n\n    /****** updating metadata corresponding to Relation Catalog relation in the Open Relation Table ******/\n\n    //free the RELCAT_RELIDth entry of the tableMetaInfo.\n\n}\n\nint OpenRelTable::getRelId(unsigned char relName[ATTR_SIZE]) {\n\n    /* traverse through the tableMetaInfo array,\n        find the entry in the Open Relation Table corresponding to relName.*/\n\n    // if found return the relation id, else indicate that the relation do not have an entry in the Open Relation Table.\n\n}\n\nint OpenRelTable::openRel(unsigned char relName[ATTR_SIZE]) {\n\n    if the relation, relName, already has an entry in the Open Relation Table:\n    { // checked using OpenRelTable::getRelId().\n\n        // return that relation id;\n    }\n\n    // find a free slot in the Open Relation Table using OpenRelTable::getFreeOpenRelTableEntry().\n    if free slot not available:\n    {\n        return E_CACHEFULL;\n    }\n\n    // let relId be used to store the free slot.\n    int relId;\n\n    /****** Setting up Relation Cache entry for the relation ******/\n\n    /* search for the entry with relation name, relName, in the Relation Catalog using linear_search() of the Block Access Layer.\n       care should be taken to reset the searchIndex of the relation, RELCAT_RELID, corresponding to\n       Relation Catalog before calling linear_search().*/\n\n    // let relcatRecId store the record id of the relation, relName, in the Relation Catalog.\n    RecId relcatRecId;\n\n    if relcatRecId == {-1, -1}:\n    {\n        // the relation is not found in the Relation Catalog.\n        return E_RELNOTEXIST;\n    }\n\n    /* read the record entry corresponding to relcatRecId and create a Relation Cache entry on it\n       using RecBuffer::getRecord() and RelCacheTable::recordToRelCacheEntry().\n       update the recId field of this Relation Cache entry to relcatRecId.\n       use the Relation Cache entry to set the relIdth entry of the RelCacheTable.*/\n\n    /****** Setting up Attribute Cache entry for the relation ******/\n\n    // let listHead be used to hold the head of the linked list of Attribute Cache entries.\n    AttrCacheEntry listHead;\n\n    /* iterate over all the entries in the Attribute Catalog corresponding to each attribute of\n       the relation, relName by multiple calls of linear_search() of the Block Access Layer.\n       care should be taken to reset the searchIndex of the relation, ATTRCAT_RELID, corresponding to\n       Attribute Catalog before the first call to linear_search().*/\n    {\n        /* let attrcatRecId store a valid record id an entry of the relation, relName,\n   in the Attribute Catalog.*/\n        RecId attrcatRecId;\n\n        /* read the record entry corresponding to attrcatRecId and create an Attribute Cache entry on it\n       using RecBuffer::getRecord() and AttrCacheTable::recordToAttrCacheEntry().\n       update the recId field of this Attribute Cache entry to attrcatRecId.\n       add the Attribute Cache entry to the linked list of listHead .*/\n    }\n\n    // set the relIdth entry of the AttrCacheTable to listHead.\n\n    /****** Setting up metadata in the Open Relation Table for the relation******/\n\n    //update the relIdth entry of the tableMetaInfo with free as false and relName as the input.\n\n    return relId;\n\n}\n\nint OpenRelTable::closeRel(int relId) {\n\n    if relId is either RELCAT_RELID or ATTRCAT_RELID:\n    {\n        return E_NOTPERMITTED;\n    }\n\n    if relId is outside the range [0, MAX_OPEN-1]:\n    {\n        return E_OUTOFBOUND;\n    }\n\n    if entry corresponding to the relId in the Open Relation Table is free:\n    {\n        return E_NOTOPEN;\n    }\n\n    /****** Releasing the Relation Cache entry of the relation ******/\n\n    // if the Relation Catalog entry of the relIdth Relation Cache entry has been modified:\n    {\n        /* Get the Relation Catalog entry from Cache using RelCacheTable::relCacheEntryToRecord().\n        Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n    }\n\n    /****** Releasing the Attribute Cache entry of the relation ******/\n\n    // iterate over all the entries in the linked list of the relIdth Attribute Cache entry.\n    {\n        if the entry has been modified:\n        {\n            /* Get the Attribute Catalog entry from Cache using AttrCacheTable::attrCacheEntryToRecord().\n             Write back that entry by instantiating RecBuffer class. Use recId member field and recBuffer.setRecord() */\n\n        }\n\n        // free the memory dynamically alloted to this entry in Attribute Cache linked list.\n    }\n\n    /****** Updating metadata in the Open Relation Table of the relation  ******/\n\n    //free the relIdth entry of the tableMetaInfo.\n\n    return SUCCESS;\n\n}\n\nint OpenRelTable::getFreeOpenRelTableEntry() {\n\n    /* traverse through the tableMetaInfo array,\n        find a free entry in the Open Relation Table.*/\n\n    // if found return the relation id, else return E_CACHEFULL.\n\n}\n\n')),(0,a.kt)("h2",{id:"openreltableh"},"OpenRelTable.h"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#ifndef NITCBASE_OPENRELTABLE_H\n#define NITCBASE_OPENRELTABLE_H\n\n#include "../define(/constants).h"\n#include "../define/errors.h"\n\ntypedef struct OpenRelTableMetaInfo {\n\n    bool free;\n    unsigned char rel_name[ATTR_SIZE];\n\n} OpenRelTableMetaInfo;\n\nclass OpenRelTable {\n\npublic:\n\n    //methods\n    OpenRelTable();\n    ~OpenRelTable();\n    static int getRelId(unsigned char relName[ATTR_SIZE]);\n    static int openRel(unsigned char relName[ATTR_SIZE]);\n    static int closeRel(int relId);\n\nprivate:\n    //field\n    static OpenRelTableMetaInfo tableMetaInfo[MAX_OPEN];\n\n    //method\n    static int getFreeOpenRelTableEntry();\n\n};\n\n#endif //NITCBASE_OPENRELTABLE_H\n\n')))}d.isMDXComponent=!0}}]);