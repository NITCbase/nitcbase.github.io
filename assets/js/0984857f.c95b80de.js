"use strict";(self.webpackChunknitcbase=self.webpackChunknitcbase||[]).push([[1466],{5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),i=n(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),i=n(7294),l=n(6010),o=n(2389),r=n(7392),s=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var t;const{lazy:n,block:o,defaultValue:p,values:m,groupId:h,className:k}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,r.l)(b,((e,t)=>e.value===t.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[C,y]=(0,i.useState)(g),I=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==C&&b.some((t=>t.value===e))&&y(e)}const x=e=>{const t=e.currentTarget,n=I.indexOf(t),a=b[n].value;a!==C&&(T(t),y(a),null!=h&&w(h,String(a)))},D=e=>{var t;let n=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},k)},b.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>I.push(e),onKeyDown:D,onClick:x},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,i.cloneElement)(f.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,o.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}},4077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>f,frontMatter:()=>u,metadata:()=>p,toc:()=>h});var a=n(7462),i=n(7294),l=n(3905),o=n(5488),r=n(5162),s=n(814);const c=e=>{let{link:t,language:n}=e;const[a,l]=(0,i.useState)("...");return(0,i.useEffect)((()=>{fetch(t).then((e=>e.text())).then((e=>l(e)))}),[]),i.createElement(s.Z,{language:n},a)},u={title:"Installation Guidelines"},d=void 0,p={unversionedId:"Misc/Installation Guidelines",id:"Misc/Installation Guidelines",title:"Installation Guidelines",description:"The recommended way to work on NITCbase is using a dedicated docker container. Docker allows us to maintain a consistent experience across all the Linux distros and versions of core utilities you might have installed.",source:"@site/docs/Misc/Installation Guidelines.md",sourceDirName:"Misc",slug:"/Misc/Installation Guidelines",permalink:"/docs/Misc/Installation Guidelines",draft:!1,tags:[],version:"current",frontMatter:{title:"Installation Guidelines"}},m={},h=[{value:"Install and setup Docker on host machine",id:"install-and-setup-docker-on-host-machine",level:2},{value:"Setting up the container",id:"setting-up-the-container",level:2},{value:"Building the container image",id:"building-the-container-image",level:3},{value:"Start the container instance",id:"start-the-container-instance",level:3},{value:"Connecting to the container",id:"connecting-to-the-container",level:3},{value:"Running the setup script",id:"running-the-setup-script",level:2},{value:"Files and Directories",id:"files-and-directories",level:2},{value:"Running the XFS Interface",id:"running-the-xfs-interface",level:2}],k={toc:h};function f(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The recommended way to work on NITCbase is using a dedicated docker container. Docker allows us to maintain a consistent experience across all the Linux distros and versions of core utilities you might have installed."),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/Misc/ManualSetup"},"manual setup")," guide is also provided, but it is not officially supported and can be followed at your own discretion."),(0,l.kt)("h2",{id:"install-and-setup-docker-on-host-machine"},"Install and setup Docker on host machine"),(0,l.kt)("p",null,"Follow the instructions available ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"here")," to install docker on your machine. You could also go through the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/"},"Docker quick start quide")," to know more about Docker ."),(0,l.kt)("admonition",{title:"WARNING",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The following has ",(0,l.kt)("strong",{parentName:"p"},"not")," been tested on ",(0,l.kt)("em",{parentName:"p"},"Windows"),".\nIf you encounter any issues or have any suggestions, raise an issue ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nitcbase/nitcbase.github.io/issues/new"},"here"))),(0,l.kt)("h2",{id:"setting-up-the-container"},"Setting up the container"),(0,l.kt)("p",null,"We'll assume the following directory structure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},".\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 NITCbase/ # <- files will be stored here and mapped to container\n")),(0,l.kt)("p",null,"We'll store all the required files in ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase")," and map the same into the container."),(0,l.kt)("p",null,"We can create the structure using the below commands"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"unix/linux",label:"Unix/Linux",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd <your directory>\ntouch Dockerfile\nmkdir NITCbase\n"))),(0,l.kt)(r.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"cd <your directory>\nNew-Item Dockerfile\nNew-Item -path NITCbase -ItemType directory\n")))),(0,l.kt)("p",null,"The contents of ",(0,l.kt)("inlineCode",{parentName:"p"},"Dockerfile")," are given below"),(0,l.kt)(c,{link:"https://raw.githubusercontent.com/Nitcbase/nitcbase-bootstrap/main/Dockerfile",language:"Dockerfile",mdxType:"FetchCodeBlock"}),(0,l.kt)("p",null,"The given ",(0,l.kt)("inlineCode",{parentName:"p"},"Dockerfile")," will setup the NITCbase environment."),(0,l.kt)("h3",{id:"building-the-container-image"},"Building the container image"),(0,l.kt)("p",null,"We'll now build the container image using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Dockerfile")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t nitcbase:ubuntu20.04 .\n")),(0,l.kt)("h3",{id:"start-the-container-instance"},"Start the container instance"),(0,l.kt)("p",null,"We'll start an instance of the container and map the local folder ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase")," into ",(0,l.kt)("inlineCode",{parentName:"p"},"/home/nitcbase/NITCbase")," directory of the container."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"unix/linux",label:"Unix/Linux",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v $PWD/NITCbase:/home/nitcbase/NITCbase -d --name nitcbase -i nitcbase:ubuntu20.04\n"))),(0,l.kt)(r.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-powershell"},"docker run -v ${PWD}/NITCbase:/home/nitcbase/NITCbase -d --name nitcbase -i nitcbase:ubuntu20.04\n")))),(0,l.kt)("p",null,"We now have a container instance running in background with the name ",(0,l.kt)("inlineCode",{parentName:"p"},"nitcbase")," and required volume mounts"),(0,l.kt)("h3",{id:"connecting-to-the-container"},"Connecting to the container"),(0,l.kt)("p",null,"We can connect to the container instance using the following commands.\n",(0,l.kt)("strong",{parentName:"p"},"These are the only commands you will need to connect to the container going forward.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker start nitcbase # if the container instance is not already running\n\ndocker exec -it nitcbase /bin/bash # to get a bash shell inside the container\n")),(0,l.kt)("h2",{id:"running-the-setup-script"},"Running the setup script"),(0,l.kt)("p",null,"Connect to the container instance as mentioned earlier."),(0,l.kt)("p",null,"Run the following commands in the terminal connected to the container."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd /home/nitcbase\n./setup.sh\n")),(0,l.kt)("h2",{id:"files-and-directories"},"Files and Directories"),(0,l.kt)("p",null,"When the setup is done, the following directories should be present in your ",(0,l.kt)("inlineCode",{parentName:"p"},"NITCbase")," folder."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},"  NITCbase\n  .\n  \u251c\u2500\u2500 Disk\n  \u251c\u2500\u2500 XFS_Interface\n  \u251c\u2500\u2500 Files\n  \u2502\xa0\xa0 \u251c\u2500\u2500 Batch_Execution_Files\n  \u2502\xa0\xa0 \u251c\u2500\u2500 Input_Files\n  \u2502\xa0\xa0 \u2514\u2500\u2500 Output_Files\n  \u2514\u2500\u2500 mynitcbase\n      \u251c\u2500\u2500 define\n   \xa0\xa0 \u251c\u2500\u2500 Disk_Class\n   \xa0\xa0 \u251c\u2500\u2500 Buffer\n   \xa0\xa0 \u251c\u2500\u2500 Cache\n   \xa0\xa0 \u251c\u2500\u2500 BPlusTree\n   \xa0\xa0 \u251c\u2500\u2500 Schema\n   \xa0\xa0 \u251c\u2500\u2500 Algebra\n   \xa0\xa0 \u251c\u2500\u2500 Frontend\n   \xa0\xa0 \u251c\u2500\u2500 Frontend_Interface\n      .\n      .\n      .\n")),(0,l.kt)("p",null,"Notable directories / files include:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Disk/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"disk")," binary file on which NITCbase Disk is simulated."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"XFS_Interface/")," : Contains the source files for the xfs interface. Once built succesfully, the ",(0,l.kt)("inlineCode",{parentName:"li"},"xfs-interface")," executable will be present here."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mynitcbase")," : This is the folder where you'll be working in to implement all the layers of NITCbase. The corresponding folders should be present inside."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mynitcbase/Disk_Class/")," : contains the ",(0,l.kt)("inlineCode",{parentName:"li"},"Disk.cpp")," file which encompasses the Disk Class described in the Physical Layer. Students should ",(0,l.kt)("strong",{parentName:"li"},"only")," use the Disk Class Object instantiation for doing disk access (read & write and create & destroy)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mynitcbase/Frontend_Interface")," : contains the full implementation of the frontend interface which is responsible for receiving commands from the user and calling the appropriate method in the ",(0,l.kt)("inlineCode",{parentName:"li"},"Frontend")," class."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mynitcbase/define/")," : contains the global constants."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Files/"),": Within this folder, three sub-directories can be found:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Batch_Execution_FIles")," - files taken as input by ",(0,l.kt)("inlineCode",{parentName:"li"},"run")," command is organized and fetched from here (run files)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Input_Files")," - Input data files for commands like ",(0,l.kt)("inlineCode",{parentName:"li"},"import"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"insert from file")," etc. are organized and fetched from here."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/Output_Files")," - Output data files generated from ",(0,l.kt)("inlineCode",{parentName:"li"},"dump")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"export")," are organized and placed here.")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"We can use sub-directories within ",(0,l.kt)("inlineCode",{parentName:"p"},"/Files/Batch_Execution_Files")," to organize the run files. In that case, ",(0,l.kt)("inlineCode",{parentName:"p"},"run folder_name/run_file")," format can be used.")),(0,l.kt)("h2",{id:"running-the-xfs-interface"},"Running the XFS Interface"),(0,l.kt)("p",null,"Now that we have all the required files, we can initialise our disk using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Misc/XFS%20Interface"},"XFS Interface")," and start working on NITCbase."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Go to the ",(0,l.kt)("inlineCode",{parentName:"li"},"XFS_Interface")," folder and run the following commands.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./xfs-interface\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"You should now be inside the XFS interface prompt. We will run the ",(0,l.kt)("a",{parentName:"li",href:"/docs/User%20Interface%20Commands/efs#format-disk"},"fdisk")," command to create our disk.xfs file.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# fdisk\n")),(0,l.kt)("p",null,"You should see the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# fdisk\nDisk formatted\n#\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Now that we have our disk file, we can exit the XFS interface by entering exit.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# exit\n")),(0,l.kt)("p",null,"With that, you should be ready to start working on NITCbase. Good luck!"))}f.isMDXComponent=!0}}]);