"use strict";(self.webpackChunknitcbase_beta=self.webpackChunknitcbase_beta||[]).push([[9819],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},7705:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return b},default:function(){return I},frontMatter:function(){return N},metadata:function(){return g},toc:function(){return v}});var a=n(7462),r=n(3366),l=n(7294),i=n(3905),o=n(2389),s=n(9443);var c=function(){var e=(0,l.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=n(9521),u=n(6010),d="tabItem_vU9c";function m(e){var t,n,a,r=e.lazy,i=e.block,o=e.defaultValue,s=e.values,m=e.groupId,f=e.className,k=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=s?s:k.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),N=(0,p.lx)(h,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===o?o:null!=(t=null!=o?o:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=k[0])?void 0:a.props.value;if(null!==b&&!h.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=c(),v=g.tabGroupChoices,w=g.setTabGroupChoices,I=(0,l.useState)(b),x=I[0],C=I[1],y=[],F=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var _=v[m];null!=_&&_!==x&&h.some((function(e){return e.value===_}))&&C(_)}var T=function(e){var t=e.currentTarget,n=y.indexOf(t),a=h[n].value;a!==x&&(F(t),C(a),null!=m&&w(m,a))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=y.indexOf(e.currentTarget)+1;n=y[a]||y[0];break;case"ArrowLeft":var r=y.indexOf(e.currentTarget)-1;n=y[r]||y[y.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},f)},h.map((function(e){var t=e.value,n=e.label;return l.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,u.Z)("tabs__item",d,{"tabs__item--active":x===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:S,onFocus:T,onClick:T},null!=n?n:t)}))),r?(0,l.cloneElement)(k.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function f(e){var t=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}var k=function(e){var t=e.children,n=e.hidden,a=e.className;return l.createElement("div",{role:"tabpanel",hidden:n,className:a},t)},h=["components"],N={sidebar_position:2,title:"Installation Guidelines",tags:["Installation","Guidelines","XFS"]},b="XFS Interface Installation Guidelines",g={unversionedId:"XFS Interface/Installation Guidelines",id:"XFS Interface/Installation Guidelines",isDocsHomePage:!1,title:"Installation Guidelines",description:"Setup",source:"@site/docs/XFS Interface/Installation Guidelines.md",sourceDirName:"XFS Interface",slug:"/XFS Interface/Installation Guidelines",permalink:"/docs/XFS Interface/Installation Guidelines",tags:[{label:"Installation",permalink:"/docs/tags/installation"},{label:"Guidelines",permalink:"/docs/tags/guidelines"},{label:"XFS",permalink:"/docs/tags/xfs"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Installation Guidelines",tags:["Installation","Guidelines","XFS"]},sidebar:"XFS",previous:{title:"XFS Interface",permalink:"/docs/XFS Interface/introduction"}},v=[{value:"Setup",id:"setup",children:[],level:2},{value:"Files and Directories",id:"files-and-directories",children:[],level:2},{value:"Frontend Interface Setup",id:"frontend-interface-setup",children:[],level:2},{value:"Docker based setup for XFS Interface",id:"docker-based-setup-for-xfs-interface",children:[],level:2},{value:"Docker based setup for Frontend Interface",id:"docker-based-setup-for-frontend-interface",children:[],level:2}],w={toc:v};function I(e){var t=e.components,n=(0,r.Z)(e,h);return(0,i.kt)("wrapper",(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"xfs-interface-installation-guidelines"},"XFS Interface Installation Guidelines"),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The following setup instructions assume that you have a Linux based machine. If you face any difficulties during the environment setup or you are running Windows or Mac operating system and do not want to set up a linux box, you can try the ",(0,i.kt)("a",{parentName:"p",href:"#docker-based-setup-for-xfs-interface"},"Docker based setup given here"),". Note: Windows installation of docker requires WSL2."))),(0,i.kt)("p",null,"The following are the instructions for installation in linux/unix environments:"),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(k,{value:"ubuntu",label:"Ubuntu / Debian",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update;\nsudo apt-get install -y build-essential cmake gcc wget curl\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,i.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n"))))),(0,i.kt)(k,{value:"fedora",label:"Fedora / Red Hat",mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf install cmake make automake gcc gcc-c++ kernel-devel wget curl\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,i.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n"))))),(0,i.kt)(k,{value:"arch",label:"Arch Linux",mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the prerequisites."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -Syy\nsudo pacman -Sy base-devel cmake gcc wget curl\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Execute the following line in terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n")),(0,i.kt)("p",{parentName:"li"},"On successful execution of the script, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"NITCbase/")," directory will be created containing all the necessary components to start the NITCbase project.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS_Interface/")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase/XFS_Interface\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the following script file to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"XFS-Interface")," executable as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the XFS Interface as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./XFS-Interface\n")))))),(0,i.kt)("h2",{id:"files-and-directories"},"Files and Directories"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Notable directories / files include:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Disk/")," : contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"disk")," binary file on which NITCbase Disk is simulated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Disk_Class/")," : contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"Disk.cpp")," file which encompasses the Disk Class described in the Physical Layer. Students should ",(0,i.kt)("strong",{parentName:"li"},"only")," use the Disk Class Object instantiation for doing disk acceess (read & write and create & destroy)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"define/")," : contains the global constants."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Files/"),": Within this folder, three sub-directories can be found:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/Batch_Execution_FIles")," - files taken as input by ",(0,i.kt)("inlineCode",{parentName:"li"},"run")," command is organized and fetched from here (run files)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/Input_Files")," - Input data files for commands like ",(0,i.kt)("inlineCode",{parentName:"li"},"import"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"insert from file")," etc. are organized and fetched from here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/Output_Fies")," - Output data files generated from ",(0,i.kt)("inlineCode",{parentName:"li"},"dump")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"export")," are organized and fetched from here."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Frontend_Interface/")," : contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"Frontend.cpp")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"frontend-runner.cpp")," files. Refer ",(0,i.kt)("a",{parentName:"li",href:"/docs/Design/Frontend"},"Frontend Interface section")," to know more. Students need not edit the ",(0,i.kt)("inlineCode",{parentName:"li"},"frontend-runner.cpp")," file rather, can start from the methods of Frontend C++ Class in ",(0,i.kt)("inlineCode",{parentName:"li"},"Frontend.cpp")," for lower layer function call invocations. To build Frontend-Interface executable locally in Linux Environment, ",(0,i.kt)("inlineCode",{parentName:"li"},"build.sh")," script present in this folder can be executed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"XFS_Interface/")," : contains the ",(0,i.kt)("inlineCode",{parentName:"li"},"build.sh")," script file for building XFS Interface. Once built succesfully, the ",(0,i.kt)("inlineCode",{parentName:"li"},"XFS-Interface")," executable will be present here."),(0,i.kt)("li",{parentName:"ul"},"Dockerfiles (To be noted if you are following the Docker method of installation given ",(0,i.kt)("a",{parentName:"li",href:"#docker-based-setup-for-xfs-interface"},"here"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Dockerfile_frontend")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Dockerfile_xfs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build_frontend.sh")," - To build the docker image for Frontend Interface from ",(0,i.kt)("inlineCode",{parentName:"li"},"Dockerfile_frontend"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build_xfs.sh")," - To build the docker image for XFS Interface from ",(0,i.kt)("inlineCode",{parentName:"li"},"Dockerfile_xfs"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"run_frontend.sh")," - To run the docker image of Frontend Interface."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"run_xfs.sh")," - To run the docker image of XFS Interface."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"install.sh"),": contains build scripts for local linux based installation of NITCbase.")))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We can use sub-directories within ",(0,i.kt)("inlineCode",{parentName:"p"},"/Files/Batch_Execution_Files")," to organize the run files. In that case, ",(0,i.kt)("inlineCode",{parentName:"p"},"run folder_name/run_file")," format can be used."))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The entire folder structure is as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NITCbase\n.\n\u251c\u2500\u2500 Disk\n\u2502\xa0\xa0 \u251c\u2500\u2500 README.txt\n\u2502\xa0\xa0 \u2514\u2500\u2500 disk\n\u251c\u2500\u2500 Disk_Class\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 Disk.h\n\u251c\u2500\u2500 Dockerfile_frontend\n\u251c\u2500\u2500 Dockerfile_xfs\n\u251c\u2500\u2500 Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Batch_Execution_Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Input_Files\n\u2502\xa0\xa0 \u251c\u2500\u2500 Output_Files\n\u2502   .\n\u2502   .\n\u2502   .\n\u251c\u2500\u2500 Frontend_Interface\n\u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 Frontend.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 Frontend.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 frontend-runner.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 frontend-runner.h\n\u251c\u2500\u2500 XFS_Interface\n\u2502\xa0\xa0 \u251c\u2500\u2500 BPlusTree.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 BPlusTree.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 Disk.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 OpenRelTable.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 OpenRelTable.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 algebra.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 algebra.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 block_access.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 block_access.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 disk_structures.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 external_fs_commands.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 external_fs_commands.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 interface.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 interface.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 schema.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 schema.h\n\u251c\u2500\u2500 build_frontend.sh\n\u251c\u2500\u2500 build_xfs.sh\n\u251c\u2500\u2500 define\n\u2502\xa0\xa0 \u251c\u2500\u2500 constants.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 enum_constants.h\n\u2502\xa0\xa0 \u251c\u2500\u2500 errors.h\n\u2502\xa0\xa0 \u2514\u2500\u2500 id.h\n\u251c\u2500\u2500 install\n\u2502\xa0\xa0 \u251c\u2500\u2500 install.sh\n\u251c\u2500\u2500 run_frontend.sh\n\u2514\u2500\u2500 run_xfs.sh\n")))),(0,i.kt)("h2",{id:"frontend-interface-setup"},"Frontend Interface Setup"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ensure you have done till step 2 in the ",(0,i.kt)("a",{parentName:"li",href:"#setup"},"above setup"),"."),(0,i.kt)("li",{parentName:"ol"},"Change directory to ",(0,i.kt)("inlineCode",{parentName:"li"},"Frontend_Interface/")," as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd nitcbase/Frontend_Interface\n"))),(0,i.kt)("li",{parentName:"ol"},"Run the following script file to generate the ",(0,i.kt)("inlineCode",{parentName:"li"},"Frontend-Interface")," executable as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build.sh;\n./build.sh\n"))),(0,i.kt)("li",{parentName:"ol"},"Run the Frontend Interface as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./Frontend-Interface\n")))),(0,i.kt)("h2",{id:"docker-based-setup-for-xfs-interface"},"Docker based setup for XFS Interface"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download and Install docker by following the steps mentioned ",(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"here"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can go through the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-started/"},"Docker quick start quide")," to know more about Docker."))),(0,i.kt)("li",{parentName:"ol"},"Open the Docker application and keep it running in the background.")),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(k,{value:"mac",label:"Mac",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download the compressed NITCbase package from ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"either one"))," of the following options and extract the compressed file:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Nitcbase/nitcbase-download/raw/main/NITCbase.zip"},"zip")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Nitcbase/nitcbase-download/raw/main/NITCbase.tar.gz"},"tar.gz")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open Terminal Application change working directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"NITCbase/")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Ensure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"build_xfs.sh")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"run_xfs.sh")," have the execute permissions by running the following commands in terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_xfs.sh;\nchmod +x run_xfs.sh;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the following shell script which will build the docker image of XFS Interface:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./build_xfs.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"To run the Docker Instance of XFS Interface execute the following shell script:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./run_xfs.sh\n"))))),(0,i.kt)(k,{value:"win",label:"Windows (WSL2)",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open WSL Linux terminal and run the following command to download the NITCbase package:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Sf https://raw.githubusercontent.com/Nitcbase/nitcbase/master/install/install.sh | sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change working directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"NITCbase/")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Ensure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"build_xfs.sh")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"run_xfs.sh")," have the execute permissions by running the following commands in terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_xfs.sh;\nchmod +x run_xfs.sh;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the following shell script which will build the docker image of XFS Interface:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./build_xfs.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"To run the Docker Instance of XFS Interface execute the following shell script:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./run_xfs.sh\n")))))),(0,i.kt)("h2",{id:"docker-based-setup-for-frontend-interface"},"Docker based setup for Frontend Interface"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ensure that you have done till step 4 in the ",(0,i.kt)("a",{parentName:"li",href:"#docker-based-setup-for-xfs-interface"},"above setup")," and that Docker application is running the background."),(0,i.kt)("li",{parentName:"ol"},"Open Terminal and change working directory to ",(0,i.kt)("inlineCode",{parentName:"li"},"NITCbase/")," as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd NITCbase\n"))),(0,i.kt)("li",{parentName:"ol"},"Ensure that the ",(0,i.kt)("inlineCode",{parentName:"li"},"build_frontend.sh")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"run_frontend.sh")," have the execute permissions by running the following commands in terminal:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x build_frontend.sh;\nchmod +x run_frontend.sh;\n"))),(0,i.kt)("li",{parentName:"ol"},"Run the following shell script which will build the docker image of Frontend Interface:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./build_frontend.sh\n"))),(0,i.kt)("li",{parentName:"ol"},"To run the Docker Instance of Frontend Interface execute the following shell script:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./run_frontend.sh\n")))))}I.isMDXComponent=!0}}]);