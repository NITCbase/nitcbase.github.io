"use strict";(self.webpackChunknitcbase_beta=self.webpackChunknitcbase_beta||[]).push([[8363],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),l=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(a.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),p=o,k=d["".concat(a,".").concat(p)]||d[p]||f[p]||s;return t?r.createElement(k,i(i({ref:n},u),{},{components:t})):r.createElement(k,i({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=d;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7501:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),s=(t(7294),t(3905)),i=["components"],c={},a="Disk Class Code",l={type:"mdx",permalink:"/Disk_Class_Impl",source:"@site/src/pages/Disk_Class_Impl.md"},u=[{value:"Disk.cpp",id:"diskcpp",children:[],level:2},{value:"Disk.h",id:"diskh",children:[],level:2}],f={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"disk-class-code"},"Disk Class Code"),(0,s.kt)("h2",{id:"diskcpp"},"Disk.cpp"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <fstream>\n#include "../define/constants.h"\n#include "../define/errors.h"\n#include "Disk.h"\n\n/*\n * Used to make a temporary copy of the disk contents before the starting of a new session.\n * This ensures that if the system has a forced shutdown during the course of the session,\n * the previous state of the disk is not lost.\n */\nDisk::Disk() {\n    /* An efficient method to copy files */\n    /* Copy Disk to Disk Run Copy */\n    std::ifstream src(DISK_PATH, std::ios::binary);\n    std::ofstream dst(DISK_RUN_COPY_PATH, std::ios::binary);\n\n    dst << src.rdbuf();\n    src.close();\n    dst.close();\n}\n\n/*\n * Used to update the changes made to the disk on graceful termination of the latest session.\n * This ensures that these changes are visible in future sessions.\n */\nDisk::~Disk() {\n    /* An efficient method to copy files */\n    /* Copy Disk Run Copy to Disk */\n    std::ifstream src(DISK_RUN_COPY_PATH, std::ios::binary);\n    std::ofstream dst(DISK_PATH, std::ios::binary);\n\n    dst << src.rdbuf();\n    src.close();\n    dst.close();\n}\n\n/*\n * Used to Read a specified block from disk\n * block - Memory pointer of the buffer to which the block contents is to be loaded/read.\n *         (MUST be Allocated by caller)\n * blockNum - Block number of the disk block to be read.\n */\nint Disk::readBlock(unsigned char *block, int blockNum) {\n    FILE *disk = fopen(DISK_RUN_COPY_PATH, "rb");\n    if (blockNum < 0 || blockNum > DISK_BLOCKS - 1) {\n        return E_OUTOFBOUND;\n    }\n    const int offset = blockNum * BLOCK_SIZE;\n    fseek(disk, offset, SEEK_SET);\n    fread(block, BLOCK_SIZE, 1, disk);\n    fclose(disk);\n    return SUCCESS;\n}\n\n/*\n * Used to Write a specified block from disk\n * block - Memory pointer of the buffer to which contain the contents to be written.\n *         (MUST be Allocated by caller)\n * blockNum - Block number of the disk block to be written into.\n */\nint Disk::writeBlock(unsigned char *block, int blockNum) {\n    FILE *disk = fopen(DISK_RUN_COPY_PATH, "rb+");\n    if (blockNum < 0 || blockNum > DISK_BLOCKS - 1) {\n        return E_OUTOFBOUND;\n    }\n    const int offset = blockNum * BLOCK_SIZE;\n    fseek(disk, offset, SEEK_SET);\n    fwrite(block, BLOCK_SIZE, 1, disk);\n    fclose(disk);\n    return SUCCESS;\n}\n')),(0,s.kt)("h2",{id:"diskh"},"Disk.h"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#ifndef NITCBASE_H\n#define NITCBASE_H\nclass Disk {\npublic:\n    Disk();\n    ~Disk();\n    static int readBlock(unsigned char *block, int blockNum);\n    static int writeBlock(unsigned char *block, int blockNum);\n};\n#endif //NITCBASE_H\n\n")))}d.isMDXComponent=!0}}]);